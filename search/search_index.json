{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0430 \u041f\u0430\u0432\u043b\u0430 K33421","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33421","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0430 \u041f\u0430\u0432\u043b\u0430 K33421"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8888 )) sock . listen ( 100 ) sock , addr = sock . accept () client_to_server = sock . recv ( 2048 ) print ( \"Data from client: \" + client_to_server . decode ( \"utf-8\" )) server_to_client = b \"Hello, client!\" sock . send ( server_to_client ) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8888 )) client_to_server = b \"Hello, server!\" sock . send ( client_to_server ) server_to_client = sock . recv ( 2048 ) print ( \"Data from server: \" + server_to_client . decode ( \"utf-8\" )) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket import math sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8001 )) sock . listen ( 10 ) sock , addr = sock . accept () data_from_client = sock . recv ( 5096 ) cat = data_from_client . decode ( \"utf-8\" ) r = cat . split () a = float ( r [ 0 ]) b = float ( r [ 1 ]) gep = round ( math . sqrt ( a ** 2 + b ** 2 ), 3 ) ms_to_cl = str ( gep ) sock . send ( ms_to_cl . encode ( \"utf-8\" )) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8001 )) mess = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 2 \u043a\u0430\u0442\u0435\u0442\u043e\u0432 (\u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b) \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b : \" ) . encode ( 'utf-8' ) sock . send ( mess ) data = sock . recv ( 4096 ) res = data . decode ( 'utf-8' ) print ( f '\u0414\u043b\u0438\u043d\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b: ' + res ) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 7171 )) sock . listen ( 10 ) sock , addr = sock . accept () file = open ( 'index.html' , 'r' ) ht = 'HTTP/1.0 200 OK \\n ' + file . read () sock . sendall ( ht . encode ( \"utf-8\" )) file . close () sock . close () * client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( 'localhost' , 7171 )) data = sock . recv ( 4096 ) print ( data . decode ( 'utf-8' )) sock . close () * index.html <!DOCTYPE html> < html lang = \"ru\" > < head > < meta charset = \"UTF-8\" > < title > Test page </ title > </ head > < body > Test page! DONE! </ body > </ html > \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket , threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 8080 )) sock . listen () clients = [] users = [] def broadcast ( sms , client ): for each in clients : if each != client : each . send ( sms ) def handle ( client ): while True : sms = client . recv ( 2000 ) broadcast ( sms , client ) def receive (): while True : client , addr = sock . accept () client . send ( 'username' . encode ()) user = client . recv ( 2000 ) . decode () clients . append ( client ) users . append ( user ) client . send ( '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u0447\u0430\u0442\u0435' . encode ()) thread = threading . Thread ( target = handle , args = ( client ,)) thread . start () receive () client.py import socket import threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server = '127.0.0.1' , 8080 sock . connect ( server ) name = input ( '\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c: ' ) def sms_write (): while True : sms = name + ' \u043d\u0430\u043f\u0438\u0441\u0430\u043b: {} ' . format ( input ( '' )) sock . send ( sms . encode ()) def sms_recive (): while True : sms = sock . recv ( 2000 ) . decode () if sms == 'username' : sock . send ( name . encode ()) else : print ( sms ) recive_thr = threading . Thread ( target = sms_recive ) write_thr = threading . Thread ( target = sms_write ) recive_thr . start () write_thr . start () \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . marks = [] def serve_forever ( self ): serve_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) serve_socket . bind (( self . host , self . port )) serve_socket . listen ( 10 ) print ( 'good' ) while True : client_socket , address = serve_socket . accept () self . serve_client ( client_socket ) def serve_client ( self , sock ): data = sock . recv ( 4096 ) . decode ( \"utf-8\" ) request = self . parse_request ( data ) response = self . handle_request ( request ) sock . send ( response . encode ()) def parse_request ( self , data ): request_line = data . split ( ' \\r\\n ' )[ 0 ] words = request_line . split () if len ( words ) == 3 : try : par = data . split ( ' \\r\\n ' )[ - 1 ] param = {} for p in par . split ( \"&\" ): param [ p [: p . index ( '=' )]] = p [ p . index ( '=' ) + 1 :] req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : param } except : req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : {}} else : raise Exception ( 'Malformed request line' ) print ( req ) return req def parse_headers ( self , data ): lines = data . split ( ' \\r\\n ' )[ 1 :] headers = {} for line in lines : parts = line . split ( ': ' ) headers [ parts [ 0 ]] = parts [ 1 ] return headers def handle_request ( self , request ): response = f \" { request [ 'version' ] } 200 OK \\n\\n \" if request [ 'method' ] == 'GET' and request [ 'url' ] == \"/\" : with open ( 'insert.html' ) as page : response += page . read () elif request [ 'method' ] == 'GET' and request [ 'url' ] == \"/view\" : body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject , mark in self . marks : body += f \"<tr><td> { subject } </td><td> { mark } </td></tr>\" body += '</table></body></html>' response += body elif request [ 'method' ] == 'POST' : self . marks . append (( request [ 'parametrs' ][ 'subject' ], request [ 'parametrs' ][ 'mark' ])) return response if __name__ == '__main__' : host = 'localhost' port = 5011 name = 'aaaa.ru' serv = MyHTTPServer ( host , port , name ) try : serv . serve_forever () except KeyboardInterrupt : pass insert.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8888 )) sock . listen ( 100 ) sock , addr = sock . accept () client_to_server = sock . recv ( 2048 ) print ( \"Data from client: \" + client_to_server . decode ( \"utf-8\" )) server_to_client = b \"Hello, client!\" sock . send ( server_to_client ) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8888 )) client_to_server = b \"Hello, server!\" sock . send ( client_to_server ) server_to_client = sock . recv ( 2048 ) print ( \"Data from server: \" + server_to_client . decode ( \"utf-8\" )) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket import math sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8001 )) sock . listen ( 10 ) sock , addr = sock . accept () data_from_client = sock . recv ( 5096 ) cat = data_from_client . decode ( \"utf-8\" ) r = cat . split () a = float ( r [ 0 ]) b = float ( r [ 1 ]) gep = round ( math . sqrt ( a ** 2 + b ** 2 ), 3 ) ms_to_cl = str ( gep ) sock . send ( ms_to_cl . encode ( \"utf-8\" )) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8001 )) mess = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 2 \u043a\u0430\u0442\u0435\u0442\u043e\u0432 (\u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b) \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b : \" ) . encode ( 'utf-8' ) sock . send ( mess ) data = sock . recv ( 4096 ) res = data . decode ( 'utf-8' ) print ( f '\u0414\u043b\u0438\u043d\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b: ' + res ) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 7171 )) sock . listen ( 10 ) sock , addr = sock . accept () file = open ( 'index.html' , 'r' ) ht = 'HTTP/1.0 200 OK \\n ' + file . read () sock . sendall ( ht . encode ( \"utf-8\" )) file . close () sock . close () * client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( 'localhost' , 7171 )) data = sock . recv ( 4096 ) print ( data . decode ( 'utf-8' )) sock . close () * index.html <!DOCTYPE html> < html lang = \"ru\" > < head > < meta charset = \"UTF-8\" > < title > Test page </ title > </ head > < body > Test page! DONE! </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket , threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 8080 )) sock . listen () clients = [] users = [] def broadcast ( sms , client ): for each in clients : if each != client : each . send ( sms ) def handle ( client ): while True : sms = client . recv ( 2000 ) broadcast ( sms , client ) def receive (): while True : client , addr = sock . accept () client . send ( 'username' . encode ()) user = client . recv ( 2000 ) . decode () clients . append ( client ) users . append ( user ) client . send ( '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u0447\u0430\u0442\u0435' . encode ()) thread = threading . Thread ( target = handle , args = ( client ,)) thread . start () receive () client.py import socket import threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server = '127.0.0.1' , 8080 sock . connect ( server ) name = input ( '\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c: ' ) def sms_write (): while True : sms = name + ' \u043d\u0430\u043f\u0438\u0441\u0430\u043b: {} ' . format ( input ( '' )) sock . send ( sms . encode ()) def sms_recive (): while True : sms = sock . recv ( 2000 ) . decode () if sms == 'username' : sock . send ( name . encode ()) else : print ( sms ) recive_thr = threading . Thread ( target = sms_recive ) write_thr = threading . Thread ( target = sms_write ) recive_thr . start () write_thr . start ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . marks = [] def serve_forever ( self ): serve_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) serve_socket . bind (( self . host , self . port )) serve_socket . listen ( 10 ) print ( 'good' ) while True : client_socket , address = serve_socket . accept () self . serve_client ( client_socket ) def serve_client ( self , sock ): data = sock . recv ( 4096 ) . decode ( \"utf-8\" ) request = self . parse_request ( data ) response = self . handle_request ( request ) sock . send ( response . encode ()) def parse_request ( self , data ): request_line = data . split ( ' \\r\\n ' )[ 0 ] words = request_line . split () if len ( words ) == 3 : try : par = data . split ( ' \\r\\n ' )[ - 1 ] param = {} for p in par . split ( \"&\" ): param [ p [: p . index ( '=' )]] = p [ p . index ( '=' ) + 1 :] req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : param } except : req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : {}} else : raise Exception ( 'Malformed request line' ) print ( req ) return req def parse_headers ( self , data ): lines = data . split ( ' \\r\\n ' )[ 1 :] headers = {} for line in lines : parts = line . split ( ': ' ) headers [ parts [ 0 ]] = parts [ 1 ] return headers def handle_request ( self , request ): response = f \" { request [ 'version' ] } 200 OK \\n\\n \" if request [ 'method' ] == 'GET' and request [ 'url' ] == \"/\" : with open ( 'insert.html' ) as page : response += page . read () elif request [ 'method' ] == 'GET' and request [ 'url' ] == \"/view\" : body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject , mark in self . marks : body += f \"<tr><td> { subject } </td><td> { mark } </td></tr>\" body += '</table></body></html>' response += body elif request [ 'method' ] == 'POST' : self . marks . append (( request [ 'parametrs' ][ 'subject' ], request [ 'parametrs' ][ 'mark' ])) return response if __name__ == '__main__' : host = 'localhost' port = 5011 name = 'aaaa.ru' serv = MyHTTPServer ( host , port , name ) try : serv . serve_forever () except KeyboardInterrupt : pass insert.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"lr2/","text":"Laboratory work 2 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django \u0412\u0430\u0440\u0438\u0430\u043d\u04421: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model class Guest ( AbstractUser ): last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) birth_date = models . DateField ( null = True ) passport = models . CharField ( max_length = 30 , null = True ) def __str__ ( self ): return self . last_name + \" \" + self . first_name class Hotel ( models . Model ): name = models . CharField ( max_length = 30 ) owner = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 40 , null = True ) description = models . CharField ( max_length = 100 , null = True ) def __str__ ( self ): return self . name class Room ( models . Model ): Guest = get_user_model () number = models . IntegerField () type = models . CharField ( max_length = 30 , null = True ) price = models . IntegerField ( null = True ) capacity = models . IntegerField ( null = True ) amenities = models . CharField ( max_length = 30 , null = True ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) guest = models . ManyToManyField ( Guest , through = 'Accommodation' ) def __str__ ( self ): return f \" { self . number } | { self . hotel } \" class Accommodation ( models . Model ): Guest = get_user_model () check_in_date = models . DateField () check_out_date = models . DateField () guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) room = models . ForeignKey ( Room , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . check_in_date } | { self . check_out_date } \" class Comment ( models . Model ): Guest = get_user_model () hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) comment = models . CharField ( max_length = 200 ) rating = models . IntegerField ( null = True ) guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) accommodation = models . ForeignKey ( Accommodation , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . rating } \" urls.py from django.urls import path from .views import * urlpatterns = [ path ( \"guest/list/\" , guest_list ), path ( \"guest/create/\" , guest_create ), path ( \"room/list/\" , room_list ), path ( \"book/\" , book ), path ( \"book/list/\" , book_list ), path ( \"month/\" , last_month ), path ( \"accom/list/\" , accommodation_list ), path ( \"accom/<int:pk>/update/\" , AccomUpdate . as_view ()), path ( \"accom/<int:pk>/delete/\" , AccomDelete . as_view ()), path ( \"home/\" , home ), path ( 'hotel/list/' , HotelList . as_view ()), path ( 'hotel/<str:pk>' , hotel_view ), path ( 'hotel/review/<str:pk>' , comment ) ] views.py from django.shortcuts import render , get_object_or_404 from django.http import Http404 from .models import Guest , Room , Accommodation , Hotel , Comment from .forms import GuestForm , AccommodationForm , CommentForm from django.views.generic import UpdateView , DeleteView from django.views.generic.list import ListView import datetime def guest_list ( request ): data = { \"guests\" : Guest . objects . all ()} return render ( request , \"guest_list.html\" , data ) def guest_create ( request ): data = {} form = GuestForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"guest_create.html\" , data ) def room_list ( request ): data = { \"rooms\" : Room . objects . all ()} return render ( request , \"room_list.html\" , data ) def book ( request ): data = {} form = AccommodationForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"book.html\" , data ) def book_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def last_month ( request ): data = {} try : month = datetime . date . today () - datetime . timedelta ( days = 31 ) data [ \"accoms\" ] = Accommodation . objects . all () . filter ( check_in_date__gte = str ( month ), check_out_date__lte = str ( datetime . date . today ())) print ( data ) except Accommodation . DoesNotExist : raise Http404 ( \"No guests this month yet :(\" ) return render ( request , \"accom_list.html\" , data ) def accommodation_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def home ( request ): return render ( request , \"home.html\" ) class AccomUpdate ( UpdateView ): model = Accommodation template_name = \"accom_update.html\" fields = [ \"check_in_date\" , \"check_out_date\" , \"guest\" , \"room\" ] success_url = \"/accom/list/\" class AccomDelete ( DeleteView ): model = Accommodation template_name = \"accom_delete.html\" success_url = \"/accom/list/\" class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects def hotel_view ( request , pk ): hotel = Hotel . objects . get ( id = pk ) comments = Comment . objects . filter ( hotel = hotel ) return render ( request , 'hotel_detail.html' , { 'hotel' : hotel , 'comments' : comments }) def comment ( request , pk ): obj = get_object_or_404 ( Hotel , id = pk ) author = request . user if request . method == 'POST' : form = CommentForm ( request . POST ) if form [ 'comment' ] . value (): if form [ 'rating' ] . value (): if form . is_valid (): com = form . save ( commit = False ) com . author = author com . hotel = obj com . save () else : form = CommentForm () return render ( request , 'review.html' , { 'form' : form })","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#laboratory-work-2","text":"","title":"Laboratory work 2"},{"location":"lr2/#django","text":"\u0412\u0430\u0440\u0438\u0430\u043d\u04421: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model class Guest ( AbstractUser ): last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) birth_date = models . DateField ( null = True ) passport = models . CharField ( max_length = 30 , null = True ) def __str__ ( self ): return self . last_name + \" \" + self . first_name class Hotel ( models . Model ): name = models . CharField ( max_length = 30 ) owner = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 40 , null = True ) description = models . CharField ( max_length = 100 , null = True ) def __str__ ( self ): return self . name class Room ( models . Model ): Guest = get_user_model () number = models . IntegerField () type = models . CharField ( max_length = 30 , null = True ) price = models . IntegerField ( null = True ) capacity = models . IntegerField ( null = True ) amenities = models . CharField ( max_length = 30 , null = True ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) guest = models . ManyToManyField ( Guest , through = 'Accommodation' ) def __str__ ( self ): return f \" { self . number } | { self . hotel } \" class Accommodation ( models . Model ): Guest = get_user_model () check_in_date = models . DateField () check_out_date = models . DateField () guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) room = models . ForeignKey ( Room , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . check_in_date } | { self . check_out_date } \" class Comment ( models . Model ): Guest = get_user_model () hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) comment = models . CharField ( max_length = 200 ) rating = models . IntegerField ( null = True ) guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) accommodation = models . ForeignKey ( Accommodation , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . rating } \" urls.py from django.urls import path from .views import * urlpatterns = [ path ( \"guest/list/\" , guest_list ), path ( \"guest/create/\" , guest_create ), path ( \"room/list/\" , room_list ), path ( \"book/\" , book ), path ( \"book/list/\" , book_list ), path ( \"month/\" , last_month ), path ( \"accom/list/\" , accommodation_list ), path ( \"accom/<int:pk>/update/\" , AccomUpdate . as_view ()), path ( \"accom/<int:pk>/delete/\" , AccomDelete . as_view ()), path ( \"home/\" , home ), path ( 'hotel/list/' , HotelList . as_view ()), path ( 'hotel/<str:pk>' , hotel_view ), path ( 'hotel/review/<str:pk>' , comment ) ] views.py from django.shortcuts import render , get_object_or_404 from django.http import Http404 from .models import Guest , Room , Accommodation , Hotel , Comment from .forms import GuestForm , AccommodationForm , CommentForm from django.views.generic import UpdateView , DeleteView from django.views.generic.list import ListView import datetime def guest_list ( request ): data = { \"guests\" : Guest . objects . all ()} return render ( request , \"guest_list.html\" , data ) def guest_create ( request ): data = {} form = GuestForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"guest_create.html\" , data ) def room_list ( request ): data = { \"rooms\" : Room . objects . all ()} return render ( request , \"room_list.html\" , data ) def book ( request ): data = {} form = AccommodationForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"book.html\" , data ) def book_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def last_month ( request ): data = {} try : month = datetime . date . today () - datetime . timedelta ( days = 31 ) data [ \"accoms\" ] = Accommodation . objects . all () . filter ( check_in_date__gte = str ( month ), check_out_date__lte = str ( datetime . date . today ())) print ( data ) except Accommodation . DoesNotExist : raise Http404 ( \"No guests this month yet :(\" ) return render ( request , \"accom_list.html\" , data ) def accommodation_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def home ( request ): return render ( request , \"home.html\" ) class AccomUpdate ( UpdateView ): model = Accommodation template_name = \"accom_update.html\" fields = [ \"check_in_date\" , \"check_out_date\" , \"guest\" , \"room\" ] success_url = \"/accom/list/\" class AccomDelete ( DeleteView ): model = Accommodation template_name = \"accom_delete.html\" success_url = \"/accom/list/\" class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects def hotel_view ( request , pk ): hotel = Hotel . objects . get ( id = pk ) comments = Comment . objects . filter ( hotel = hotel ) return render ( request , 'hotel_detail.html' , { 'hotel' : hotel , 'comments' : comments }) def comment ( request , pk ): obj = get_object_or_404 ( Hotel , id = pk ) author = request . user if request . method == 'POST' : form = CommentForm ( request . POST ) if form [ 'comment' ] . value (): if form [ 'rating' ] . value (): if form . is_valid (): com = form . save ( commit = False ) com . author = author com . hotel = obj com . save () else : form = CommentForm () return render ( request , 'review.html' , { 'form' : form })","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django"}]}